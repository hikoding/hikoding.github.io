<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux chown 사용법</title>
    <link href="/2022/10/18/Linux/Ubuntu/linux%20chown%20%EC%82%AC%EC%9A%A9%EB%B2%95/"/>
    <url>/2022/10/18/Linux/Ubuntu/linux%20chown%20%EC%82%AC%EC%9A%A9%EB%B2%95/</url>
    
    <content type="html"><![CDATA[<h1 id="chown-사용법"><a href="#chown-사용법" class="headerlink" title="chown 사용법"></a>chown 사용법</h1><p>리눅스에서 디렉토리나 파일의 소유자를 변경할수있습니다.</p><p><code>./tmp/</code> 디렉터리의 소유자와 그룹을 모두 ubuntu로 변경하는 예제입니다.</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> ubuntu:ubuntu ./tmp/</code></pre></div><p>소유자만 변경하고자 하는 경우</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> ubuntu ./tmp/</code></pre></div><p>하위 디렉토리까지 변경하는 경우 -R 옵션을 넣어줍니다.</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R ubuntu:ubuntu ./tmp/</code></pre></div><p>심볼릭 링크를 변경하는 경우 -h 옵션을 추가해 줍니다.</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -h ubuntu:ubuntu ./symbolic_path/</code></pre></div><p>심볼릭 링크와 하위 디렉토리를 포함해 변경하는경우 -hR을 함께 넣어줍니다.</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -hR ubuntu:ubuntu ./tmp/</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>django-dotenv 사용하기</title>
    <link href="/2022/10/16/Python/Django/Django%20dotenv/"/>
    <url>/2022/10/16/Python/Django/Django%20dotenv/</url>
    
    <content type="html"><![CDATA[<h1 id="Django-dotenv-사용하기"><a href="#Django-dotenv-사용하기" class="headerlink" title="Django-dotenv 사용하기"></a>Django-dotenv 사용하기</h1><p>중요한 정보의 경우 직접 코드에 써넣으면 보안상 위험할 수 있으므로<br>환경 변수에 저장해놓고 불러와서 사용하는 게 좀 더 안전한 방법입니다.</p><p>이를 사용하기 편하게 해주는 여러 library가 있습니다.</p><p>그중 django-dotenv의 사용법을 소개합니다</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>django-dotenv 를 설치해줍니다.</p><div class="code-wrapper"><pre><code class="hljs shell">pip install django-dotenv</code></pre></div><h2 id="env-파일생성"><a href="#env-파일생성" class="headerlink" title=".env 파일생성"></a><code>.env</code> 파일생성</h2><p>프로젝트의 root 폴더에서 <code>.env</code> 파일을 생성합니다<br>다음은 <code>.env</code>에 입력하는 예시입니다.<br>각자에게 알맞은 값으로 입력해 줍니다.</p><div class="code-wrapper"><pre><code class="hljs txt">EMAIL_HOST_USER=&#x27;user&#x27;EMAIL_HOST_PASSWORD=&#x27;password&#x27;</code></pre></div><p><code>settings.py</code> 파일에서 사용하는 예시입니다.</p><div class="code-wrapper"><pre><code class="hljs py">EMAIL_HOST_USER = os.environ.get(<span class="hljs-string">&#x27;EMAIL_HOST_USER&#x27;</span>)EMAIL_HOST_PASSWORD = os.environ.get(<span class="hljs-string">&#x27;EMAIL_HOST_PASSWORD&#x27;</span>)</code></pre></div><h2 id="추가-설정"><a href="#추가-설정" class="headerlink" title="추가 설정"></a>추가 설정</h2><p><code>manage.py</code> 파일에 다음 내용을 추가해 줍니다.</p><div class="code-wrapper"><pre><code class="hljs py"><span class="hljs-keyword">import</span> dotenv <span class="hljs-comment">#add</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    dotenv.read_dotenv() <span class="hljs-comment">#add</span>    ...</code></pre></div><p>django에서 django-dotenv의 사용방법을 알아보았습니다.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>설치</title>
    <link href="/2022/10/14/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%84%A4%EC%B9%98/"/>
    <url>/2022/10/14/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%84%A4%EC%B9%98/</url>
    
    <content type="html"><![CDATA[<h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><p>파이썬 설치하기</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>01개요</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>주석</title>
    <link href="/2022/10/14/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%A3%BC%EC%84%9D/"/>
    <url>/2022/10/14/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%A3%BC%EC%84%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h1><p>주석은 코드를 설명하는 데 사용할 수 있습니다.<br>코드를 실행에 영향을 주지 않습니다.</p><p><code>#</code>을 맨 앞에 써주면 됩니다.</p><p>Example</p><div class="code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># This is a comment</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)</code></pre></div><p>result</p><div class="code-wrapper"><pre><code class="hljs shell">Hello World!</code></pre></div><h1 id="여러줄-주석"><a href="#여러줄-주석" class="headerlink" title="여러줄 주석"></a>여러줄 주석</h1><p>삼중 따옴표를 사용하여 여러 줄을 한 번에 주석 처리할 수 있습니다.<br>홑따옴표(‘’’), 쌍따옴표(“””) 모두 가능합니다.</p><p>Example</p><div class="code-wrapper"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">This is a</span><span class="hljs-string">multi-line comment.</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>01개요</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>변수</title>
    <link href="/2022/10/13/Python/Python/01%EA%B0%9C%EC%9A%94/%EB%B3%80%EC%88%98/"/>
    <url>/2022/10/13/Python/Python/01%EA%B0%9C%EC%9A%94/%EB%B3%80%EC%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h1><p>변수는 값을 할당하여 데이터를 저장할 수 있습니다.</p><p>Example</p><div class="code-wrapper"><pre><code class="hljs py">a = <span class="hljs-number">5</span>b = <span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-built_in">print</span>(a)<span class="hljs-built_in">print</span>(b)</code></pre></div><p>Result</p><div class="code-wrapper"><pre><code class="hljs py"><span class="hljs-number">5</span>hello</code></pre></div><h2 id="변수-유형-Type-선언"><a href="#변수-유형-Type-선언" class="headerlink" title="변수 유형(Type) 선언"></a>변수 유형(Type) 선언</h2><p>파이썬은 어떤 타입의 데이터가 들어갈지 선언할 필요가 없으며,<br>선언 후 다른 타입으로 변경할 수도 있습니다.</p><p>Example</p><div class="code-wrapper"><pre><code class="hljs py">a = <span class="hljs-number">5</span>a = <span class="hljs-string">&#x27;Five&#x27;</span><span class="hljs-built_in">print</span>(a)</code></pre></div><p>Result</p><div class="code-wrapper"><pre><code class="hljs shell">Five</code></pre></div><h2 id="문자열-String"><a href="#문자열-String" class="headerlink" title="문자열(String)"></a>문자열(String)</h2><p>문자 여러개가 나열된것을 문자열이라고 합니다.<br>홑따옴표(작은따옴표), 쌍따옴표(큰따옴표) 모두 사용 가능합니다</p><div class="code-wrapper"><pre><code class="hljs py">a = <span class="hljs-string">&quot;hello&quot;</span>a = <span class="hljs-string">&#x27;hello&#x27;</span></code></pre></div><h2 id="변수-대소문자"><a href="#변수-대소문자" class="headerlink" title="변수 대소문자"></a>변수 대소문자</h2><p>변수이름은 대소문자를 구분합니다.<br>다음과 같이 두개의 변수가 생성됩니다.<br>Example</p><div class="code-wrapper"><pre><code class="hljs py">a = <span class="hljs-number">3</span>A = <span class="hljs-number">4</span><span class="hljs-built_in">print</span>(a)<span class="hljs-built_in">print</span>(A)</code></pre></div><p>Result</p><div class="code-wrapper"><pre><code class="hljs shell">34</code></pre></div><h2 id="변수-유형-Type-확인"><a href="#변수-유형-Type-확인" class="headerlink" title="변수 유형(Type) 확인"></a>변수 유형(Type) 확인</h2><p><code>type()</code>은 변수의 데이터 유형을 확인할 수 있습니다.</p><p>Example</p><div class="code-wrapper"><pre><code class="hljs py">a = <span class="hljs-number">5</span>b = <span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))</code></pre></div><p>Result</p><div class="code-wrapper"><pre><code class="hljs shell">&lt;class &#x27;int&#x27;&gt;&lt;class &#x27;str&#x27;&gt;</code></pre></div><h2 id="형변환-Casting"><a href="#형변환-Casting" class="headerlink" title="형변환(Casting)"></a>형변환(Casting)</h2><p>변수의 타입을 변경할 수 있습니다.<br><code>str()</code> 은 문자, <code>int()</code>는 숫자, <code>float()</code> 은 실수로 변경하는 함수입니다.</p><div class="code-wrapper"><pre><code class="hljs py">a = <span class="hljs-built_in">str</span>(<span class="hljs-number">5</span>)b = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;5&#x27;</span>)c = <span class="hljs-built_in">float</span>(<span class="hljs-number">5</span>)<span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<span class="hljs-built_in">print</span>(b, <span class="hljs-built_in">type</span>(b))<span class="hljs-built_in">print</span>(c, <span class="hljs-built_in">type</span>(c))</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>01개요</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>첫번째 프로그램</title>
    <link href="/2022/10/13/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%B2%AB%EB%B2%88%EC%A7%B8%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/"/>
    <url>/2022/10/13/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%B2%AB%EB%B2%88%EC%A7%B8%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="첫번째-프로그램"><a href="#첫번째-프로그램" class="headerlink" title="첫번째 프로그램"></a>첫번째 프로그램</h1><p>‘hello world’ 문자열을 출력하는 프로그램을 작성하겠습니다.</p><p><code>example.py</code> 파일을 만듭니다.<br>아래와 같이 입력하고 실행합니다.</p><div class="code-wrapper"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>)</code></pre></div><p>터미널에서 <code>python example.py</code> 명령으로 실행합니다.</p><div class="code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># result</span>Hello, World!</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>01개요</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Ajax CSRF-Token</title>
    <link href="/2022/10/12/Python/Django/Django%20Ajax%20CSRF-Token/"/>
    <url>/2022/10/12/Python/Django/Django%20Ajax%20CSRF-Token/</url>
    
    <content type="html"><![CDATA[<h1 id="Django-Ajax-CSRF-Token"><a href="#Django-Ajax-CSRF-Token" class="headerlink" title="Django Ajax CSRF-Token"></a>Django Ajax CSRF-Token</h1><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>django에서 javascript의 fetch를 통해 url에 접근하면 csrf-token 에러가 나는 경우가 있다.</p><div class="code-wrapper"><pre><code class="hljs shell">POST http://127.0.0.1:8000/update-item/ 403 (Forbidden)updateUserOrder @ cart.js:19(anonymous) @ cart.js:11VM3958:2 Uncaught (in promise) SyntaxError: Unexpected token &#x27;&lt;&#x27;, &quot;&lt;!DOCTYPE &quot;... is not valid JSON</code></pre></div><p>Django에서 기본적으로 보안상 지원하는 csrf-token이 없기때문에 발생하는 문제이다</p><p>view 함수에 @csrf_exempt를 사용해서 csrf-token을 사용하지 않는다고 명시 할 수 있지만 보안상 불리해진다.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>django document에 이 문제에 대한 해결 코드가 정리되어 있다<br><a href="https://docs.djangoproject.com/en/4.1/howto/csrf/">https://docs.djangoproject.com/en/4.1/howto/csrf/</a></p><p>아래 code를 javascript 코드에 포함시켜준다.</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>) &#123;    <span class="hljs-keyword">let</span> cookieValue = <span class="hljs-literal">null</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;        <span class="hljs-keyword">const</span> cookies = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>)        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cookies.<span class="hljs-property">length</span>; i++) &#123;            <span class="hljs-keyword">const</span> cookie = cookies[i].<span class="hljs-title function_">trim</span>()            <span class="hljs-keyword">if</span> (cookie.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>) === name + <span class="hljs-string">&#x27;=&#x27;</span>) &#123;                cookieValue = <span class="hljs-built_in">decodeURIComponent</span>(cookie.<span class="hljs-title function_">substring</span>(name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>))                <span class="hljs-keyword">break</span>            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> cookieValue&#125;<span class="hljs-keyword">const</span> csrftoken = <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;csrftoken&#x27;</span>)</code></pre></div><p>그 다음 fetch를 사용하는 코드에서 headers에 csrf옵션을 추가해준다</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(url, &#123;    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,    <span class="hljs-attr">headers</span>: &#123;        <span class="hljs-string">&#x27;X-CSRFToken&#x27;</span>: csrftoken, <span class="hljs-comment">//django csrfToken</span>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,    &#125;,    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;        <span class="hljs-attr">productId</span>: productId,        <span class="hljs-attr">action</span>: action,    &#125;),&#125;)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django decorator @property</title>
    <link href="/2022/10/12/Python/Django/Django%20property/"/>
    <url>/2022/10/12/Python/Django/Django%20property/</url>
    
    <content type="html"><![CDATA[<h1 id="Django-decorator"><a href="#Django-decorator" class="headerlink" title="Django decorator"></a>Django decorator</h1><p>Django에는 함수(메소드)를 편하게 쓰도록 도와주는 장식자(decorator)기능이 있습니다.</p><h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><p>@property는 마치 필드처럼 접근할수있도록 해주는 decorator입니다</p><h3 id="이미지가-없는-경우-예외-처리-decorator-예제"><a href="#이미지가-없는-경우-예외-처리-decorator-예제" class="headerlink" title="이미지가 없는 경우 예외 처리 decorator 예제"></a>이미지가 없는 경우 예외 처리 <code>decorator</code> 예제</h3><p>아래와 같이 함수에 <code>@property</code>를 넣어주면</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>(models.Model):    name = models.CharField(max_length=<span class="hljs-number">200</span>, null=<span class="hljs-literal">True</span>)    price = models.FloatField()    digital = models.BooleanField(default=<span class="hljs-literal">False</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">False</span>)    image = models.ImageField(upload_to=<span class="hljs-string">&#x27;img/&#x27;</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.name<span class="hljs-meta">    @property</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">imageUrl</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">try</span>:            url = self.image.url        <span class="hljs-keyword">except</span>:            url = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">return</span> url</code></pre></div><p>템플릿에서 <code>product.imageUrl</code>로 접근 할 수 있습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#store.html</span>&lt;img <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span> src=<span class="hljs-string">&quot;&#123;&#123;product.imageUrl&#125;&#125;&quot;</span>&gt;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Django</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>List (리스트)</title>
    <link href="/2022/10/12/Python/Python/02.%20%EC%9E%90%EB%A3%8C%ED%98%95/List/"/>
    <url>/2022/10/12/Python/Python/02.%20%EC%9E%90%EB%A3%8C%ED%98%95/List/</url>
    
    <content type="html"><![CDATA[<h1 id="List-리스트"><a href="#List-리스트" class="headerlink" title="List (리스트)"></a>List (리스트)</h1>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>02. 자료형</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>인터프리터</title>
    <link href="/2022/10/11/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/"/>
    <url>/2022/10/11/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="인터프리터-사용하기"><a href="#인터프리터-사용하기" class="headerlink" title="인터프리터 사용하기"></a>인터프리터 사용하기</h1><h2 id="콘솔에서-계산하기"><a href="#콘솔에서-계산하기" class="headerlink" title="콘솔에서 계산하기"></a>콘솔에서 계산하기</h2><p>콘솔에 다음과 같이 입력해보겠습니다.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">2</span> + <span class="hljs-number">2</span></span>4</code></pre></div><h2 id="변수에-값-할당하기"><a href="#변수에-값-할당하기" class="headerlink" title="변수에 값 할당하기"></a>변수에 값 할당하기</h2><p>변수에 값을 할당하는 예제입니다.<br>값을 대입할때에는 등호(&#x3D;)를 사용합니다.</p><div class="code-wrapper"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = <span class="hljs-string">&#x27;hello&#x27;</span></span><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a</span>&#x27;hello&#x27;</code></pre></div><h2 id="문자열-사용하기"><a href="#문자열-사용하기" class="headerlink" title="문자열 사용하기"></a>문자열 사용하기</h2><p>따옴표안에 글자를 써넣으면 문자열로 사용할수있습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-string">&#x27;hello&#x27;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>01개요</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01. 제어문 사용하기</title>
    <link href="/2022/10/11/Python/Python/03.%20%EC%A0%9C%EC%96%B4%EB%AC%B8/01.%20%EC%A0%9C%EC%96%B4%EB%AC%B8%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2022/10/11/Python/Python/03.%20%EC%A0%9C%EC%96%B4%EB%AC%B8/01.%20%EC%A0%9C%EC%96%B4%EB%AC%B8%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="01-제어문-사용하기"><a href="#01-제어문-사용하기" class="headerlink" title="01. 제어문 사용하기"></a>01. 제어문 사용하기</h1><h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><p>특정 조건을 만족하면 다음 문장을 실행해달라는 의미입니다.</p><div class="code-wrapper"><pre><code class="hljs python">number = <span class="hljs-number">3</span><span class="hljs-keyword">if</span> number &gt; <span class="hljs-number">2</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X는 2보다 큽니다.&#x27;</span>)<span class="hljs-comment"># result</span><span class="hljs-string">&#x27;X는 2보다 큽니다.&#x27;</span></code></pre></div><h2 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h2><p>특정 배열을 반복해달라는 의미입니다.</p><div class="code-wrapper"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:    <span class="hljs-built_in">print</span>(word)<span class="hljs-comment"># result</span>applebananaorange</code></pre></div><h2 id="range-함수"><a href="#range-함수" class="headerlink" title="range() 함수"></a>range() 함수</h2><p>어떤 숫자만큼 반복하길 원하는 경우 사용할수있습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):    <span class="hljs-built_in">print</span>(i)<span class="hljs-comment"># result</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span></code></pre></div><p>특정 숫자부터 시작해서 반복해달라고할경우 다음과같이 인자값을 2개를 줍니다.<br>이때 첫번째 숫자는 포함하고 마지막 숫자는 포함하지 않습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>):    <span class="hljs-built_in">print</span>(i)<span class="hljs-comment"># result</span><span class="hljs-number">3</span><span class="hljs-number">4</span></code></pre></div><h2 id="break문"><a href="#break문" class="headerlink" title="break문"></a>break문</h2><p>for문을 순회하다가 break문을 만나면 즉시 for문을 빠져나옵니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:        <span class="hljs-keyword">break</span>    <span class="hljs-built_in">print</span>(i)<span class="hljs-comment"># result</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">2</span></code></pre></div><h1 id="continue문"><a href="#continue문" class="headerlink" title="continue문"></a>continue문</h1><p>for문을 순회하다가 continue문을 만나면 이후 문장을 실행하지않고 다음 순회로 넘어갑니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:        <span class="hljs-keyword">continue</span>    <span class="hljs-built_in">print</span>(i)<span class="hljs-comment"># result</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">4</span></code></pre></div><h1 id="pass문"><a href="#pass문" class="headerlink" title="pass문"></a>pass문</h1><p>아무것도 하지 않습니다.<br>굳이 pass문을 작성하는 이유는 에러가 나는 것을 방지해줍니다.<br>나중에 배울 클래스에서 주로 사용됩니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-keyword">pass</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>03. 제어문</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 명령어</title>
    <link href="/2022/10/10/Linux/Ubuntu/Ubuntu%20%EB%AA%85%EB%A0%B9%EC%96%B4/"/>
    <url>/2022/10/10/Linux/Ubuntu/Ubuntu%20%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu에서-디렉토리-복사하기"><a href="#ubuntu에서-디렉토리-복사하기" class="headerlink" title="ubuntu에서 디렉토리 복사하기"></a>ubuntu에서 디렉토리 복사하기</h1><p>-r 옵션은 하위 디렉토리까지 모두 복사하는 옵션입니다.</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r /path1 /path2</code></pre></div><h1 id="ubuntu에서-디렉토리-이동하기"><a href="#ubuntu에서-디렉토리-이동하기" class="headerlink" title="ubuntu에서 디렉토리 이동하기"></a>ubuntu에서 디렉토리 이동하기</h1><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /path1 /path2</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache 명령어</title>
    <link href="/2022/10/10/Linux/Apache/Apache%20%EB%AA%85%EB%A0%B9%EC%96%B4/"/>
    <url>/2022/10/10/Linux/Apache/Apache%20%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-버전-확인하기"><a href="#Apache-버전-확인하기" class="headerlink" title="Apache 버전 확인하기"></a>Apache 버전 확인하기</h1><div class="code-wrapper"><pre><code class="hljs bash">apache2 -v[result]Server version: Apache/2.4.52 (Ubuntu)Server built:   2022-06-14T12:30:21</code></pre></div><h1 id="Apache-환경설정-변경하기"><a href="#Apache-환경설정-변경하기" class="headerlink" title="Apache 환경설정 변경하기"></a>Apache 환경설정 변경하기</h1><div class="code-wrapper"><pre><code class="hljs bash">sudo vi /etc/apache2/apache2.conf</code></pre></div><h1 id="Apache-서비스-재시작하기"><a href="#Apache-서비스-재시작하기" class="headerlink" title="Apache 서비스 재시작하기"></a>Apache 서비스 재시작하기</h1><div class="code-wrapper"><pre><code class="hljs bash">sudo service apache2 restart</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Apache</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>소개</title>
    <link href="/2022/10/09/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%86%8C%EA%B0%9C/"/>
    <url>/2022/10/09/Python/Python/01%EA%B0%9C%EC%9A%94/%EC%86%8C%EA%B0%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="python-소개"><a href="#python-소개" class="headerlink" title="python 소개"></a>python 소개</h1><p>파이썬은 인기있는 프로그래밍 언어입니다.<br>1991년 귀도 반 로섬(Guido van Rossum)에 의해 만들어졌습니다.</p><h2 id="어디에-사용하나요"><a href="#어디에-사용하나요" class="headerlink" title="어디에 사용하나요?"></a>어디에 사용하나요?</h2><ul><li>웹 개발</li><li>소프트웨어 개발</li><li>머신러닝</li><li>데이터 분석</li></ul><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><p>Python은 비교적 간단한 구문을 갖고 있습니다.<br>Python은 인터프리터 시스템에서 실행됩니다.<br>즉 컴파일 없이 코드를 작성하는 즉시실행 할 수 있습니다.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>01개요</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>04. 함수</title>
    <link href="/2022/10/09/Python/Python/04.%20%ED%95%A8%EC%88%98/01.%20%ED%95%A8%EC%88%98/"/>
    <url>/2022/10/09/Python/Python/04.%20%ED%95%A8%EC%88%98/01.%20%ED%95%A8%EC%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Python</category>
      
      <category>04. 함수</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Terminal에서 webpack 사용하기</title>
    <link href="/2022/10/06/JavaScript/Webpack/webpack-cli/"/>
    <url>/2022/10/06/JavaScript/Webpack/webpack-cli/</url>
    
    <content type="html"><![CDATA[<h1 id="Terminal에서-webpack-사용하기"><a href="#Terminal에서-webpack-사용하기" class="headerlink" title="Terminal에서 webpack 사용하기"></a>Terminal에서 webpack 사용하기</h1><h2 id="webpack-webpack-cli-설치"><a href="#webpack-webpack-cli-설치" class="headerlink" title="webpack, webpack-cli 설치"></a>webpack, webpack-cli 설치</h2><p>npm을 통해 webpack과 webpack-cli 설치가 필요합니다.</p><div class="code-wrapper"><pre><code class="hljs shell">npm i -g webpack webpack-cli</code></pre></div><h2 id="production-모드로-build하기"><a href="#production-모드로-build하기" class="headerlink" title="production 모드로 build하기"></a>production 모드로 build하기</h2><p>–mode production 를 추가해주면 됩니다.<br>하지만 기본값이므로 생략 가능합니다.</p><div class="code-wrapper"><pre><code class="hljs shell">webpack ./js/main.js --output-path dist --output-filename main.js</code></pre></div><h2 id="development-모드로-build하기"><a href="#development-모드로-build하기" class="headerlink" title="development 모드로 build하기"></a>development 모드로 build하기</h2><p>–mode development를 추가해줍니다.</p><div class="code-wrapper"><pre><code class="hljs shell">webpack ./js/main.js --mode development --output-path dist --output-filename main.js</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 3 (Response, status)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF3/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF3/</url>
    
    <content type="html"><![CDATA[<p>앞에서 사용되었던 JsonReponse, status 대신<br>Rest Framework 에서 제공되는 Response, status로 사용 할 수 있습니다.</p><p>views 파일을 수정해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/views.py&#x27;</span><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> api_view<span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-meta">@api_view(<span class="hljs-params">[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">article_list</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        articles = Article.objects.<span class="hljs-built_in">all</span>()        serializer = ArticleSerializer(articles, many=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> Response(serializer.data)    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:        serializer = ArticleSerializer(data=request.data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)        <span class="hljs-keyword">return</span> Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)<span class="hljs-meta">@api_view(<span class="hljs-params">[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-string">&#x27;DELETE&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">article_detail</span>(<span class="hljs-params">request, pk</span>):    <span class="hljs-keyword">try</span>:        article = Article.objects.get(pk=pk)    <span class="hljs-keyword">except</span> Article.DoesNotExist:        <span class="hljs-keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        serializer = ArticleSerializer(article)        <span class="hljs-keyword">return</span> Response(serializer.data)    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;PUT&#x27;</span>:        serializer = ArticleSerializer(article, data=request.data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> Response(serializer.data)        <span class="hljs-keyword">return</span> Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;DELETE&#x27;</span>:        article.delete()        <span class="hljs-keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 4 (클래스뷰)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF4/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF4/</url>
    
    <content type="html"><![CDATA[<p>앞에 views.py 의 함수기반뷰를 Class-based Views로 수정하여 사용할 수 있습니다.</p><p>views 파일을 수정해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/views.py&#x27;</span><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):        articles = Article.objects.<span class="hljs-built_in">all</span>()        serializer = ArticleSerializer(articles, many=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> Response(serializer.data)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):        serializer = ArticleSerializer(data=request.data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)        <span class="hljs-keyword">return</span> Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)<span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleDetails</span>(<span class="hljs-title class_ inherited__">APIView</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_object</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span></span>):        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">return</span> Article.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)        <span class="hljs-keyword">except</span> Article.DoesNotExist:            <span class="hljs-keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span></span>):        article = self.get_object(<span class="hljs-built_in">id</span>)        serializer = ArticleSerializer(article)        <span class="hljs-keyword">return</span> Response(serializer.data)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span></span>):        article = self.get_object(<span class="hljs-built_in">id</span>)        serializer = ArticleSerializer(article, data=request.data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> Response(serializer.data)        <span class="hljs-keyword">return</span> Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span></span>):        article = self.get_object(<span class="hljs-built_in">id</span>)        article.delete()        <span class="hljs-keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</code></pre></div><p>urls.py 또한 클래스뷰로 수정해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/urls.py&#x27;</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> ArticleAPIView, ArticleDetailsurlpatterns = [    path(<span class="hljs-string">&#x27;article/&#x27;</span>, ArticleAPIView.as_view()),    path(<span class="hljs-string">&#x27;detail/&lt;int:id&gt;/&#x27;</span>, ArticleDetails.as_view()),]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rest Framework 간단 구동 소스</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/Rest%20Framework%20%EA%B0%84%EB%8B%A8%20%EA%B5%AC%EB%8F%99%20%EC%86%8C%EC%8A%A4/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/Rest%20Framework%20%EA%B0%84%EB%8B%A8%20%EA%B5%AC%EB%8F%99%20%EC%86%8C%EC%8A%A4/</url>
    
    <content type="html"><![CDATA[<p>간단하게 테스트용으로 구동해봅니다</p><p>우선 myapp이라는 앱을 추가하고 settings.py에 추가한 상태입니다.</p><p><code>myapp.models.py</code></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(models.Model):    first_name = models.CharField(max_length=<span class="hljs-number">30</span>)    last_name = models.CharField(max_length=<span class="hljs-number">30</span>)</code></pre></div><p><code>serializers.py</code></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonSerializer</span>(serializers.ModelSerializer):    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Person        fields = <span class="hljs-string">&#x27;__all__&#x27;</span></code></pre></div><p><code>views.py</code></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> PersonSerializer<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Person<span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonViewSet</span>(viewsets.ModelViewSet):    queryset = Person.objects.<span class="hljs-built_in">all</span>()    serializer_class = PersonSerializer</code></pre></div><p><code>urls.py</code> (프로젝트폴더)</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers<span class="hljs-keyword">from</span> myapp <span class="hljs-keyword">import</span> viewsrouter = routers.DefaultRouter()router.register(<span class="hljs-string">&#x27;persons&#x27;</span>, views.PersonViewSet)urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, include(router.urls)),    path(<span class="hljs-string">&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="hljs-string">&#x27;rest_framework&#x27;</span>))]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 1 (프로젝트, serializer 생성)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF1/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF1/</url>
    
    <content type="html"><![CDATA[<p>장고로 프로젝트를 생성하고  <code>api_basic</code> 이름으로 앱을 하나 생성 해주었습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;Terminal&#x27;</span>&gt; pip install django djangorestframework&gt; django-admin startproject config &gt; python manage.py startapp api_basic</code></pre></div><p><code>settings.py</code> 파일에 다음을 추가합니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;config/settings.py&#x27;</span>INSTALLED_APPS = [    ...    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,    <span class="hljs-string">&#x27;api_basic&#x27;</span>,]</code></pre></div><p><code>api_basic</code>앱에서  <code>models.py</code> 파일에 다음을 추가합니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/models.py&#x27;</span><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span>(models.Model):    title = models.CharField(max_length=<span class="hljs-number">100</span>)    author = models.CharField(max_length=<span class="hljs-number">100</span>)    email = models.EmailField(max_length=<span class="hljs-number">100</span>)    date = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.title</code></pre></div><p><code>makemigrations</code>과  <code>migrate</code>를 해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;Terminal&#x27;</span>&gt; python manage.py makemigrations&gt; python manage.py migrate</code></pre></div><p> <code>admin</code>에 <code>Article</code> 모델을 등록 해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/admin.py&#x27;</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Articleadmin.site.register(Article)</code></pre></div><p><code>serializers.py</code>를 작성하여 줍니다.</p><p><code>ModelSerializer</code>를 사용하면 좀 더 간단히 구현 할 수 있지만, (장고 폼과 비슷)</p><p>구조파악을 위해 <code>Serializer</code>로 구현하고, 나중에 <code>ModelSerializer</code>로 수정 하겠습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/serializers.py&#x27;</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleSerializer</span>(serializers.Serializer):    title = serializers.CharField(max_length=<span class="hljs-number">100</span>)    author = serializers.CharField(max_length=<span class="hljs-number">100</span>)    email = serializers.EmailField(max_length=<span class="hljs-number">100</span>)    date = serializers.DateTimeField()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, validated_data</span>):        <span class="hljs-keyword">return</span> Article.objects.create(validated_data)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, instance, validated_data</span>):        instance.title = validated_data.get(<span class="hljs-string">&#x27;title&#x27;</span>, instance.title)        instance.author = validated_data.get(<span class="hljs-string">&#x27;author&#x27;</span>, instance.author)        instance.email = validated_data.get(<span class="hljs-string">&#x27;email&#x27;</span>, instance.email)        instance.date = validated_data.get(<span class="hljs-string">&#x27;date&#x27;</span>, instance.date)        instance.save()        <span class="hljs-keyword">return</span> instance</code></pre></div><p><code>python manage.py shell</code> 명령을 이용하여 다음과 같이 입력해보면</p><p><code>serializer</code>의 기본 컨셉에 대해 알 수 있습니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;python manage.py shell&#x27;</span>In [ <span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> api_basic.models <span class="hljs-keyword">import</span> ArticleIn [ <span class="hljs-number">2</span>]: <span class="hljs-keyword">from</span> api_basic.serializers <span class="hljs-keyword">import</span> ArticleSerializerIn [ <span class="hljs-number">3</span>]: <span class="hljs-keyword">from</span> rest_framework.renderers <span class="hljs-keyword">import</span> JSONRendererIn [ <span class="hljs-number">4</span>]: <span class="hljs-keyword">from</span> rest_framework.parsers <span class="hljs-keyword">import</span> JSONParser    In [ <span class="hljs-number">5</span>]: a = Article(title = <span class="hljs-string">&#x27;Article Title&#x27;</span>, author=<span class="hljs-string">&#x27;user1&#x27;</span>, email=<span class="hljs-string">&#x27;user1@gmail.com&#x27;</span>)In [ <span class="hljs-number">6</span>]: a.save()In [ <span class="hljs-number">7</span>]: a = Article(title = <span class="hljs-string">&#x27;New Article&#x27;</span>, author=<span class="hljs-string">&#x27;user2&#x27;</span>, email=<span class="hljs-string">&#x27;user2@gmail.com&#x27;</span>)In [ <span class="hljs-number">8</span>]: a.save()In [ <span class="hljs-number">9</span>]: serializer = ArticleSerializer(a)In [<span class="hljs-number">10</span>]: serializer.dataOut[<span class="hljs-number">10</span>]: &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;New Article&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>: <span class="hljs-string">&#x27;user2&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;user2@gmail.com&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2020-07-06T02:19:14.115209Z&#x27;</span>&#125;In [<span class="hljs-number">11</span>]: content = JSONRenderer().render(serializer.data)In [<span class="hljs-number">12</span>]: contentOut[<span class="hljs-number">12</span>]: <span class="hljs-string">b&#x27;&#123;&quot;title&quot;:&quot;New Article&quot;,&quot;author&quot;:&quot;user2&quot;,&quot;email&quot;:&quot;user2@gmail.com&quot;,&quot;date&quot;:&quot;2020-07-06T02:19:14.115209Z&quot;&#125;&#x27;</span>In [<span class="hljs-number">13</span>]: serializer = ArticleSerializer(Article.objects.<span class="hljs-built_in">all</span>(), many=<span class="hljs-literal">True</span>)In [<span class="hljs-number">14</span>]: serializer.dataOut[<span class="hljs-number">14</span>]: [OrderedDict([(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Article Title&#x27;</span>), (<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;user1&#x27;</span>), (<span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;user1@gmail.com&#x27;</span>), (<span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-string">&#x27;2020-07-06T02:17:53.606361Z&#x27;</span>)]), OrderedDict([(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;New Article&#x27;</span>), (<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;user2&#x27;</span>), (<span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;user2@gmail.com&#x27;</span>), (<span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-string">&#x27;2020-07-06T02:19:14.115209Z&#x27;</span>)])]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 2 (함수기반뷰)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF2/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF2/</url>
    
    <content type="html"><![CDATA[<p>Serializer를 ModelSerializer로 변경하면 좀 더 간단하게 구현 할 수 있습니다.</p><p>아래와 같이 수정합니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/serializers.py&#x27;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleSerializer</span>(serializers.ModelSerializer):    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:        model = Article        fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>]</code></pre></div><p>view를 추가해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/views.py&#x27;</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse, JsonResponse<span class="hljs-keyword">from</span> rest_framework.parsers <span class="hljs-keyword">import</span> JSONParser<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<span class="hljs-meta">@csrf_exempt</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">article_list</span>(<span class="hljs-params">request</span>):    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        articles = Article.objects.<span class="hljs-built_in">all</span>()        serializer = ArticleSerializer(articles, many=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> JsonResponse(serializer.data, safe=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:        data = JSONParser().parse(request)        serializer = ArticleSerializer(data=data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> JsonResponse(serializer.data, status=<span class="hljs-number">201</span>)        <span class="hljs-keyword">return</span> JsonResponse(serializer.error, status=<span class="hljs-number">400</span>)<span class="hljs-meta">@csrf_exempt</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">article_detail</span>(<span class="hljs-params">request, pk</span>):    <span class="hljs-keyword">try</span>:        article = Article.objects.get(pk=pk)    <span class="hljs-keyword">except</span> Article.DoesNotExist:        <span class="hljs-keyword">return</span> HttpResponse(status=<span class="hljs-number">404</span>)    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        serializer = ArticleSerializer(article)        <span class="hljs-keyword">return</span> JsonResponse(serializer.data)    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;PUT&#x27;</span>:        data = JSONParser().parse(request)        serializer = ArticleSerializer(article, data=data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> JsonResponse(serializer.data)        <span class="hljs-keyword">return</span> JsonResponse(serializer.error, status=<span class="hljs-number">400</span>)    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;DELETE&#x27;</span>:        article.delete()        <span class="hljs-keyword">return</span> HttpResponse(status=<span class="hljs-number">204</span>)</code></pre></div><p>urls.py에 등록해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;config/urls.py&#x27;</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, includeurlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;api_basic.urls&#x27;</span>)),]</code></pre></div><p>api_basic 앱에도 urls.py를 추가해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic\urls.py&#x27;</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> article_list, article_detailurlpatterns = [    path(<span class="hljs-string">&#x27;article/&#x27;</span>, article_list),    path(<span class="hljs-string">&#x27;detail/&lt;int:pk&gt;/&#x27;</span>, article_detail),]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 6 (인증)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF6/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF6/</url>
    
    <content type="html"><![CDATA[<p>인증 기능을 추가하여 RestFramework를 이용해봅니다.</p><p>views.py에 다음과 같이 authentication, permissions를 추가 해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/views.py&#x27;</span><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> generics, mixins<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> SessionAuthentication, BasicAuthentication, TokenAuthentication<span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> IsAuthenticated<span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericAPIView</span>(generics.GenericAPIView, mixins.ListModelMixin,     mixins.CreateModelMixin, mixins.UpdateModelMixin, mixins.RetrieveModelMixin,    mixins.DestroyModelMixin):    serializer_class = ArticleSerializer    queryset = Article.objects.<span class="hljs-built_in">all</span>()    lookup_field = <span class="hljs-string">&#x27;id&#x27;</span>    authentication_classes = [SessionAuthentication, BasicAuthentication, TokenAuthentication]    permission_classes = [IsAuthenticated]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span>:            <span class="hljs-keyword">return</span> self.retrieve(request)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">list</span>(request)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):        <span class="hljs-keyword">return</span> self.create(request)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">return</span> self.update(request, <span class="hljs-built_in">id</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span></span>):        <span class="hljs-keyword">return</span> self.destroy(request, <span class="hljs-built_in">id</span>)</code></pre></div><p>계정을 통한 인증의 경우</p><p>postman 프로그램에서 Authorization을 Basic auth로 설정하고,<br>아이디와 비밀번호를 입력하고 send를 보내면 api가 잘 작동하게됩니다.</p><p>토큰인증의경우<br>settings.py 에 한줄 추가하여 줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;config/settings.py&#x27;</span>INSTALLED_APPS = [    ...    <span class="hljs-string">&#x27;rest_framework.authtoken&#x27;</span>,]</code></pre></div><p>python manage.py migrate 명령을 실행해줍니다.</p><p>admin페이지로 가서 보면 token메뉴가 추가되어있는 것을 확인 할 수 있습니다.</p><p>토큰을 발급받은 뒤</p><p>postman에서 Headers에 키밸류 옵션을 추가하여 send 를 보내면 잘 작동하게 됩니다..<br>key: Authorization, value: token &lt;토큰값&gt;</p>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 7 (ViewSet)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF7/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF7/</url>
    
    <content type="html"><![CDATA[<p>ViewSet을 이용한 구현 코드입니다.</p><p>앞에 코드에서 views.py와 urls.py를 다음과 같이 수정 합니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic\views.py&#x27;</span><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> get_object_or_404<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleViewSet</span>(viewsets.ViewSet):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self, request</span>):        articles = Article.objects.<span class="hljs-built_in">all</span>()        serializer = ArticleSerializer(articles, many=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> Response(serializer.data)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, request</span>):        serializer = ArticleSerializer(data=request.data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)        <span class="hljs-keyword">return</span> Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retrieve</span>(<span class="hljs-params">self, request, pk=<span class="hljs-literal">None</span></span>):        queryset = Article.objects.<span class="hljs-built_in">all</span>()        article = get_object_or_404(queryset, pk=pk)        serializer = ArticleSerializer(article)        <span class="hljs-keyword">return</span> Response(serializer.data)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, request, pk=<span class="hljs-literal">None</span></span>):        article = Article.objects.get(pk=pk)        serializer = ArticleSerializer(article, data=request.data)        <span class="hljs-keyword">if</span> serializer.is_valid():            serializer.save()            <span class="hljs-keyword">return</span> Response(serializer.data)        <span class="hljs-keyword">return</span> Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic\urls.py&#x27;</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<span class="hljs-keyword">from</span> rest_framework.routers <span class="hljs-keyword">import</span> DefaultRouter<span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> ArticleViewSetrouter = DefaultRouter()router.register(<span class="hljs-string">&#x27;article&#x27;</span>, ArticleViewSet, basename=<span class="hljs-string">&#x27;article&#x27;</span>)urlpatterns = [    path(<span class="hljs-string">&#x27;viewset/&#x27;</span>, include(router.urls)),    path(<span class="hljs-string">&#x27;viewset/&lt;int:pk&gt;/&#x27;</span>, include(router.urls)),]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 8 (GenericViewSet)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF8/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF8/</url>
    
    <content type="html"><![CDATA[<p>GenericViewSet를 이용하면 매우 짧은코드로 drf를 작동할수있습니다.</p><p>앞선 코드에서 views.py 와 urls.py를 다음과 같이 수정합니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic\views.py&#x27;</span><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> generics, mixins<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleViewSet</span>(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.CreateModelMixin,     mixins.UpdateModelMixin, mixins.RetrieveModelMixin, mixins.DestroyModelMixin):    serializer_class = ArticleSerializer    queryset = Article.objects.<span class="hljs-built_in">all</span>()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic\urls.py&#x27;</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<span class="hljs-keyword">from</span> rest_framework.routers <span class="hljs-keyword">import</span> DefaultRouter<span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> ArticleViewSetrouter = DefaultRouter()router.register(<span class="hljs-string">&#x27;article&#x27;</span>, ArticleViewSet, basename=<span class="hljs-string">&#x27;article&#x27;</span>)urlpatterns = [    path(<span class="hljs-string">&#x27;viewset/&#x27;</span>, include(router.urls)),    path(<span class="hljs-string">&#x27;viewset/&lt;int:pk&gt;/&#x27;</span>, include(router.urls)),]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework 5 (제네릭뷰와 mixin)</title>
    <link href="/2022/10/06/Before/Python/Django/RestFramework/DRF5/"/>
    <url>/2022/10/06/Before/Python/Django/RestFramework/DRF5/</url>
    
    <content type="html"><![CDATA[<p>제네릭뷰와 mixin을 사용하여 좀 더 간결하게 사용할 수 있습니다.</p><p>views 파일을 수정해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/views.py&#x27;</span><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> ArticleSerializer<span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> generics, mixins<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Article<span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericAPIView</span>(generics.GenericAPIView, mixins.ListModelMixin,     mixins.CreateModelMixin, mixins.UpdateModelMixin, mixins.RetrieveModelMixin,    mixins.DestroyModelMixin):    serializer_class = ArticleSerializer    queryset = Article.objects.<span class="hljs-built_in">all</span>()    lookup_field = <span class="hljs-string">&#x27;id&#x27;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span>:            <span class="hljs-keyword">return</span> self.retrieve(request)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">list</span>(request)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):        <span class="hljs-keyword">return</span> self.create(request)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span></span>):        <span class="hljs-keyword">return</span> self.update(request, <span class="hljs-built_in">id</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, request, <span class="hljs-built_in">id</span></span>):        <span class="hljs-keyword">return</span> self.destroy(request, <span class="hljs-built_in">id</span>)</code></pre></div><p>urls.py 도 함께 수정해줍니다.</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;api_basic/urls.py&#x27;</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> GenericAPIViewurlpatterns = [    path(<span class="hljs-string">&#x27;generic/article/&#x27;</span>, GenericAPIView.as_view()),    path(<span class="hljs-string">&#x27;generic/article/&lt;int:id&gt;/&#x27;</span>, GenericAPIView.as_view()),]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Python</category>
      
      <category>Django</category>
      
      <category>RestFramework</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>02. console 객체 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/02.%20console%20%EA%B0%9D%EC%B2%B4/"/>
    <url>/2019/10/28/Before/Javascript/Node/02.%20console%20%EA%B0%9D%EC%B2%B4/</url>
    
    <content type="html"><![CDATA[<p>console 객체 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;안녕하세요&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;숫자입니다. %d&#x27;</span>, <span class="hljs-number">10</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;문자열입니다. %s&#x27;</span>, <span class="hljs-string">&#x27;안녕&#x27;</span>)<span class="hljs-keyword">var</span> person = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;소녀시대&#x27;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;자바스크립트 객체 입니다. %j&#x27;</span>, person)<span class="hljs-comment">// 객체 속성 확인</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(person)</code></pre></div><div class="code-wrapper"><pre><code class="hljs css">안녕하세요숫자입니다. <span class="hljs-number">10</span>문자열입니다. 안녕자바스크립트 객체 입니다. &#123;&quot;name&quot;:<span class="hljs-string">&quot;홍길동&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;&#123; name: <span class="hljs-string">&#x27;홍길동&#x27;</span>, age: <span class="hljs-number">20</span> &#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01. 파일이름, 파일경로 알아내기</title>
    <link href="/2019/10/28/Before/Javascript/Node/01.%20%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%A6%84%20%ED%8C%8C%EC%9D%BC%EA%B2%BD%EB%A1%9C%20%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/01.%20%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%A6%84%20%ED%8C%8C%EC%9D%BC%EA%B2%BD%EB%A1%9C%20%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>파일이름, 파일경로 알아내기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;파일이름 : %s&#x27;</span>, __filename)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;파일경로 : %s&#x27;</span>, __dirname)</code></pre></div><div class="code-wrapper"><pre><code class="hljs maxima">파일이름 : c:\work\<span class="hljs-built_in">example</span>\node_easyspub\<span class="hljs-built_in">example</span>.js파일경로 : c:\work\<span class="hljs-built_in">example</span>\node_easyspub</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>05. 변수에 함수 할당하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/05.%20%EB%B3%80%EC%88%98%EC%97%90%20%ED%95%A8%EC%88%98%20%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/05.%20%EB%B3%80%EC%88%98%EC%97%90%20%ED%95%A8%EC%88%98%20%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>변수에 함수 할당하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 변수에 함수 할당하기</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-keyword">var</span> result = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;더하기 결과 : &#x27;</span> + result )</code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">더하기 결과 : 20</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 변수에 함수 할당하기2</span><span class="hljs-keyword">var</span> add2 = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-keyword">var</span> result = <span class="hljs-title function_">add2</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;더하기 결과 : &#x27;</span> + result )</code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">더하기 결과 : 20</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>03. console.time</title>
    <link href="/2019/10/28/Before/Javascript/Node/03.%20console%20time/"/>
    <url>/2019/10/28/Before/Javascript/Node/03.%20console%20time/</url>
    
    <content type="html"><![CDATA[<p>console.time : 실행시 걸린시간을 표시해줍니다.</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;duration_time&#x27;</span>)<span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;    result += i&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;duration_time&#x27;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">duration_time</span>: <span class="hljs-number">0</span>.<span class="hljs-number">400</span>ms</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>04. 모듈로 분리하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/04.%20%EB%AA%A8%EB%93%88%EB%A1%9C%20%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/04.%20%EB%AA%A8%EB%93%88%EB%A1%9C%20%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="같은-파일에서-모듈-분리하기"><a href="#같은-파일에서-모듈-분리하기" class="headerlink" title="같은 파일에서 모듈 분리하기"></a>같은 파일에서 모듈 분리하기</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> calc = &#123;&#125;calc.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>) &#123;    <span class="hljs-keyword">return</span> a+b&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;모듈로 분리하기 전 - calc.add:&#x27;</span> + calc.<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp">모듈로 분리하기 전 - calc.<span class="hljs-keyword">add</span>:<span class="hljs-number">30</span></code></pre></div><h3 id="다른-파일로-모듈-분리하기"><a href="#다른-파일로-모듈-분리하기" class="headerlink" title="다른 파일로 모듈 분리하기"></a>다른 파일로 모듈 분리하기</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// calc.js</span><span class="hljs-built_in">exports</span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><span class="hljs-keyword">var</span> calc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./calc&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;모듈로 분리한 후 - calc.add : &#x27;</span> + calc.<span class="hljs-title function_">add</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">모듈로 분리한 후 - calc.<span class="hljs-built_in">add</span> : 40</code></pre></div><h3 id="다른-파일로-모듈-분리하기2"><a href="#다른-파일로-모듈-분리하기2" class="headerlink" title="다른 파일로 모듈 분리하기2"></a>다른 파일로 모듈 분리하기2</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// calc2.js</span><span class="hljs-keyword">var</span> calc = &#123;&#125;calc.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = calc</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// main2.js</span><span class="hljs-keyword">var</span> calc2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./calc2&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;모듈로 분리한 후 - calc2.add: &#x27;</span> + calc2.<span class="hljs-title function_">add</span>(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs csharp">모듈로 분리한 후 - calc2.<span class="hljs-keyword">add</span>: <span class="hljs-number">60</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>06. 객체 안에 함수 넣기</title>
    <link href="/2019/10/28/Before/Javascript/Node/06.%20%EA%B0%9D%EC%B2%B4%20%EC%95%88%EC%97%90%20%ED%95%A8%EC%88%98%20%EB%84%A3%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/06.%20%EA%B0%9D%EC%B2%B4%20%EC%95%88%EC%97%90%20%ED%95%A8%EC%88%98%20%EB%84%A3%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>객체 안에 함수 넣기1</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 객체 안에 함수 넣기</span><span class="hljs-keyword">var</span> person = &#123;&#125;person.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;홍길동&#x27;</span>person[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">20</span>person.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;더하기: &#x27;</span> + person.<span class="hljs-title function_">add</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">더하기: 40</span></code></pre></div><p>객체 안에 함수 넣기2</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 객체 안에 함수 넣기2</span><span class="hljs-keyword">var</span> person = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동&#x27;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,    <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;        <span class="hljs-keyword">return</span> a + b    &#125;&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;더하기: &#x27;</span> + person.<span class="hljs-title function_">add</span>(<span class="hljs-number">40</span>, <span class="hljs-number">40</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">더하기: 80</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>08. 배열에 함수 추가하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/08.%20%EB%B0%B0%EC%97%B4%EC%97%90%20%ED%95%A8%EC%88%98%20%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/08.%20%EB%B0%B0%EC%97%B4%EC%97%90%20%ED%95%A8%EC%88%98%20%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열, 배열 추가하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에 함수 추가하기</span><span class="hljs-keyword">var</span> users = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;]<span class="hljs-keyword">var</span> oper = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;users.<span class="hljs-title function_">push</span>(oper)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(users)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;세번째 배열 요소를 함수로 실행: &#x27;</span> + users[<span class="hljs-number">2</span>](<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql">[ &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;홍길동&#x27;</span>, age: <span class="hljs-number">20</span> &#125;,  &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, age: <span class="hljs-number">22</span> &#125;,  [<span class="hljs-keyword">Function</span>: oper] ]세번째 배열 요소를 함수로 실행: <span class="hljs-number">20</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>07. 배열 및 원소 추가하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/07.%20%EB%B0%B0%EC%97%B4%20%EB%B0%8F%20%EC%9B%90%EC%86%8C%20%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/07.%20%EB%B0%B0%EC%97%B4%20%EB%B0%8F%20%EC%9B%90%EC%86%8C%20%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열 및 원소 추가하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열</span><span class="hljs-keyword">var</span> users = [<span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-string">&#x27;홍길동3&#x27;</span>]<span class="hljs-keyword">var</span> users = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;, &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">25</span>&#125;]<span class="hljs-comment">// 원소 추가하기</span>users.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;사용자 수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;첫번째 사용자 이름: &#x27;</span> + users[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">사용자 수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><span class="hljs-attribute">첫번째 사용자 이름</span><span class="hljs-punctuation">:</span> <span class="hljs-string">홍길동1</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10. 배열에서 push, pop 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/10.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20push,%20pop%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/10.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20push,%20pop%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열에 push, pop 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에 push, pop 사용하기</span><span class="hljs-keyword">var</span> users = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;]<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소의 개수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-comment">// push : 배열에 원소 추가하기</span>users.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소의 개수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-comment">// pop : 마지막 원소 꺼내기</span><span class="hljs-keyword">var</span> elem = users.<span class="hljs-title function_">pop</span>()<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소의 개수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pop 으로 꺼낸 세번째 원소&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(elem)</code></pre></div><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">배열 원소의 개수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><span class="hljs-attribute">배열 원소의 개수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><span class="hljs-attribute">배열 원소의 개수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><span class="hljs-attribute">pop 으로 꺼낸 세번째 원소</span><span class="hljs-attribute">&#123; name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;홍길동3&#x27;, age: 28 &#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11. 배열에 unshift, shift 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/11.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20unshift%20shift%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/11.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20unshift%20shift%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열에서 unshift, shift 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에 unshift, shift 사용하기</span><span class="hljs-keyword">var</span> users = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;]<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소의 개수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-comment">// unshift : 배열의 첫번째 원소 추가하기</span>users.<span class="hljs-title function_">unshift</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소의 개수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-comment">// shift : 배열의 첫번째 원소 꺼내기</span><span class="hljs-keyword">var</span> elem = users.<span class="hljs-title function_">shift</span>()<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소의 개수: &#x27;</span> + users.<span class="hljs-property">length</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;shift로 꺼낸 첫번째 원소&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(elem)</code></pre></div><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">배열 원소의 개수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><span class="hljs-attribute">배열 원소의 개수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><span class="hljs-attribute">배열 원소의 개수</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><span class="hljs-attribute">shift로 꺼낸 첫번째 원소</span><span class="hljs-attribute">&#123; name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;홍길동1&#x27;, age: 28 &#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12. 배열에서 delete 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/12.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20delete%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/12.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20delete%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열에서 delete 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에서 delete 사용하기</span><span class="hljs-keyword">var</span> users = [    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;]<span class="hljs-comment">// delete : 원소는 삭제되나 자리는 남아있습니다..</span><span class="hljs-comment">// splice를 사용하면 자리까지 삭제됩니다.</span><span class="hljs-keyword">delete</span> users[<span class="hljs-number">1</span>]<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(users)</code></pre></div><div class="code-wrapper"><pre><code class="hljs xquery">[ &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;홍길동1&#x27;</span>, age: <span class="hljs-number">22</span> &#125;,  &lt;<span class="hljs-number">1</span><span class="hljs-built_in"> empty</span> <span class="hljs-type">item</span>&gt;,  &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, age: <span class="hljs-number">29</span> &#125; ]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>09. 배열에서 for문 활용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/09.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20for%EB%AC%B8%20%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/09.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20for%EB%AC%B8%20%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열에 for문 활용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에 for문 활용하기</span><span class="hljs-keyword">var</span> users = [    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> &#125;]<span class="hljs-comment">// C style for문</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;users.<span class="hljs-property">length</span>; i++)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소 #&#x27;</span> + i + <span class="hljs-string">&#x27; : &#x27;</span> + users[i].<span class="hljs-property">name</span>)&#125;<span class="hljs-comment">// forEach문</span>users.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem, index</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;배열 원소 #&#x27;</span> + index + <span class="hljs-string">&#x27; : &#x27;</span> + elem.<span class="hljs-property">name</span>)&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs 1c">배열 원소 <span class="hljs-meta">#0 : 홍길동</span>배열 원소 <span class="hljs-meta">#1 : 홍길동2</span>배열 원소 <span class="hljs-meta">#2 : 홍길동3</span>배열 원소 <span class="hljs-meta">#0 : 홍길동</span>배열 원소 <span class="hljs-meta">#1 : 홍길동2</span>배열 원소 <span class="hljs-meta">#2 : 홍길동3</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>13. 배열에서 splice 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/13.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20splice%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/13.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20splice%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열에서 splice 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에서 splice 사용하기</span><span class="hljs-keyword">var</span> users = [    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;]<span class="hljs-comment">// splice로 원소 추가하기</span>users.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;홍길동4&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">32</span>&#125;)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(users)<span class="hljs-comment">// splice로 원소 삭제하기, 2번인덱스부터 1개를 삭제함</span>users.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(users)</code></pre></div><div class="code-wrapper"><pre><code class="hljs scheme">[ &#123; name: <span class="hljs-symbol">&#x27;홍길동1</span>&#x27;, age: <span class="hljs-number">22</span> &#125;,  &#123; name: <span class="hljs-symbol">&#x27;홍길동4</span>&#x27;, age: <span class="hljs-number">32</span> &#125;,  &#123; name: <span class="hljs-symbol">&#x27;홍길동2</span>&#x27;, age: <span class="hljs-number">24</span> &#125;,  &#123; name: <span class="hljs-symbol">&#x27;홍길동3</span>&#x27;, age: <span class="hljs-number">29</span> &#125; ][ &#123; name: <span class="hljs-symbol">&#x27;홍길동1</span>&#x27;, age: <span class="hljs-number">22</span> &#125;,  &#123; name: <span class="hljs-symbol">&#x27;홍길동4</span>&#x27;, age: <span class="hljs-number">32</span> &#125;,  &#123; name: <span class="hljs-symbol">&#x27;홍길동3</span>&#x27;, age: <span class="hljs-number">29</span> &#125; ]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>14. 배열에서 slice 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/14.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20slice%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/14.%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20slice%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>배열에서 slice 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 배열에서 slice 사용하기</span><span class="hljs-keyword">var</span> users = [    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> &#125;,    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;]<span class="hljs-comment">// 1번 인덱스를 복제합니다</span><span class="hljs-keyword">var</span> users2 = users.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;users 객체&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(users)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;users2 객체&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(users2)</code></pre></div><div class="code-wrapper"><pre><code class="hljs pgsql">users 객체[ &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;홍길동1&#x27;</span>, age: <span class="hljs-number">22</span> &#125;,  &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, age: <span class="hljs-number">24</span> &#125;,  &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;홍길동3&#x27;</span>, age: <span class="hljs-number">29</span> &#125; ]users2 객체[ &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, age: <span class="hljs-number">24</span> &#125; ]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>16. prototype 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/16.%20prototype%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/16.%20prototype%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>prototype 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// prototype 사용하기</span><span class="hljs-keyword">var</span> person1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동1&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;<span class="hljs-keyword">var</span> person2 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;홍길동2&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age&#125;<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">walk</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">speed</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(speed + <span class="hljs-string">&#x27;km 속도로 걸어갑니다.&#x27;</span>)&#125;<span class="hljs-keyword">var</span> person3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;홍길동3&#x27;</span>, <span class="hljs-number">23</span>)<span class="hljs-keyword">var</span> person4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;홍길동4&#x27;</span>, <span class="hljs-number">24</span>)person3.<span class="hljs-title function_">walk</span>(<span class="hljs-number">10</span>)person4.<span class="hljs-title function_">walk</span>(<span class="hljs-number">20</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs erlang"><span class="hljs-number">10</span>km 속도로 걸어갑니다.<span class="hljs-number">20</span>km 속도로 걸어갑니다.</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>17. url, querystring 모듈</title>
    <link href="/2019/10/28/Before/Javascript/Node/17.%20url,%20querystring%20%EB%AA%A8%EB%93%88/"/>
    <url>/2019/10/28/Before/Javascript/Node/17.%20url,%20querystring%20%EB%AA%A8%EB%93%88/</url>
    
    <content type="html"><![CDATA[<p>url, querystring 모듈</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// url 모듈 : url 주소를 분석합니다</span><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<span class="hljs-keyword">var</span> urlStr =    <span class="hljs-string">&#x27;https://search.naver.com/search.naver?sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn&#x27;</span><span class="hljs-keyword">var</span> curUrl = url.<span class="hljs-title function_">parse</span>(urlStr)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(curUrl)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;query: &#x27;</span> + curUrl.<span class="hljs-property">query</span>)<span class="hljs-keyword">var</span> curStr = url.<span class="hljs-title function_">format</span>(curUrl)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;url: &#x27;</span> + curStr)<span class="hljs-comment">// querystring 모듈 : url의 parameter값을 분석합니다.</span><span class="hljs-keyword">var</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<span class="hljs-comment">// 검색어만 추출합니다.</span><span class="hljs-keyword">var</span> params = querystring.<span class="hljs-title function_">parse</span>(curUrl.<span class="hljs-property">query</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;검색어: &#x27;</span> + params.<span class="hljs-property">query</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">Url</span> &#123;  <span class="hljs-attr">protocol:</span> <span class="hljs-string">&#x27;https:&#x27;</span>,  <span class="hljs-attr">slashes:</span> <span class="hljs-literal">true</span>,  <span class="hljs-attr">auth:</span> <span class="hljs-literal">null</span>,  <span class="hljs-attr">host:</span> <span class="hljs-string">&#x27;search.naver.com&#x27;</span>,  <span class="hljs-attr">port:</span> <span class="hljs-literal">null</span>,  <span class="hljs-attr">hostname:</span> <span class="hljs-string">&#x27;search.naver.com&#x27;</span>,  <span class="hljs-attr">hash:</span> <span class="hljs-literal">null</span>,  <span class="hljs-attr">search:</span> <span class="hljs-string">&#x27;?sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn&#x27;</span>,  <span class="hljs-attr">query:</span> <span class="hljs-string">&#x27;sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn&#x27;</span>,  <span class="hljs-attr">pathname:</span> <span class="hljs-string">&#x27;/search.naver&#x27;</span>,  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;/search.naver?sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn&#x27;</span>,  <span class="hljs-attr">href:</span>   <span class="hljs-string">&#x27;https://search.naver.com/search.naver?sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn&#x27;</span> &#125;<span class="hljs-attr">query:</span> <span class="hljs-string">sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn</span><span class="hljs-attr">url:</span> <span class="hljs-string">https://search.naver.com/search.naver?sm=top_hty&amp;fbm=1&amp;ie=utf8&amp;query=popcorn</span><span class="hljs-string">검색어:</span> <span class="hljs-string">popcorn</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>15. callback 함수</title>
    <link href="/2019/10/28/Before/Javascript/Node/15.%20callback%20%ED%95%A8%EC%88%98/"/>
    <url>/2019/10/28/Before/Javascript/Node/15.%20callback%20%ED%95%A8%EC%88%98/</url>
    
    <content type="html"><![CDATA[<p>callback 함수</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// callback 함수</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, callback</span>) &#123;    <span class="hljs-keyword">var</span> result = a + b    <span class="hljs-title function_">callback</span>(result)&#125;<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;더하기 결과(콜백함수 안에서): &#x27;</span> + result)&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs gcode">더하기 결과<span class="hljs-comment">(콜백함수 안에서)</span>: <span class="hljs-number">30</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>18. 이벤트 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/18.%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/18.%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>이벤트 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 이벤트 사용하기</span>process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exit 이벤트 발생함.&#x27;</span>)&#125;)<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2초 후에 실행 되었음&#x27;</span>)   process.<span class="hljs-title function_">exit</span>()&#125;, <span class="hljs-number">2000</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2초 후에 실행 될 것임&#x27;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-number">2</span>초 후에 실행 될 것임<span class="hljs-number">2</span>초 후에 실행 되었음<span class="hljs-keyword">exit</span> 이벤트 발생함.</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20. emit을 활용하여 이벤트 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/20.%20emit%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/20.%20emit%EC%9D%84%20%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>emit을 활용하여 이벤트 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js 파일 내용</span><span class="hljs-comment">// emit을 활용하여 이벤트 사용하기</span><span class="hljs-comment">// calc 파일 가져오기</span><span class="hljs-keyword">var</span> <span class="hljs-title class_">Calc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./calc&#x27;</span>)<span class="hljs-keyword">var</span> calc1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calc</span>()calc1.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;stop&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Calc에 stop 이벤트 전달함.&#x27;</span>)<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2초 후에 실행되었음&#x27;</span>)    process.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;tick&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)&#125;, <span class="hljs-number">2000</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs Javascript"><span class="hljs-comment">// calc.js 파일 내용</span><span class="hljs-keyword">var</span> <span class="hljs-title class_">EventEmitter</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>).<span class="hljs-property">EventEmitter</span><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<span class="hljs-keyword">var</span> <span class="hljs-title class_">Calc</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;stop&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Calc에 stop 이벤트 전달됨.&#x27;</span>)    &#125;)&#125;<span class="hljs-comment">// util을 사용하여 상속, emit을 사용하기위함</span>util.<span class="hljs-title function_">inherits</span>(<span class="hljs-title class_">Calc</span>, <span class="hljs-title class_">EventEmitter</span>)<span class="hljs-title class_">Calc</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Calc</span></code></pre></div><p>Calc에 stop 이벤트 전달됨.<br>Calc에 stop 이벤트 전달함.</p><div class="code-wrapper"><pre><code class="hljs"></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>21. readFileSync : 파일을 읽고 불러오기 (동기방식)</title>
    <link href="/2019/10/28/Before/Javascript/Node/21.%20readFileSync%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%9D%BD%EA%B3%A0%20%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0%20%EB%8F%99%EA%B8%B0%EB%B0%A9%EC%8B%9D/"/>
    <url>/2019/10/28/Before/Javascript/Node/21.%20readFileSync%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%9D%BD%EA%B3%A0%20%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0%20%EB%8F%99%EA%B8%B0%EB%B0%A9%EC%8B%9D/</url>
    
    <content type="html"><![CDATA[<p>readFileSync : 파일을 읽고 불러오기 (동기방식)</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// readFileSync : 파일을 읽고 불러오기 (동기방식)</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<span class="hljs-keyword">var</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</code></pre></div><div class="code-wrapper"><pre><code class="hljs stata">&#123;  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node&quot;</span>,  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;main.js&quot;</span>,  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;</span><span class="hljs-keyword">Error</span>: <span class="hljs-keyword">no</span> <span class="hljs-keyword">test</span> specified\<span class="hljs-string">&quot; &amp;&amp; exit 1&quot;</span>     &#125;,  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>19. 이벤트 on, emit 사용하기</title>
    <link href="/2019/10/28/Before/Javascript/Node/19.%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20on%20emit%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/28/Before/Javascript/Node/19.%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20on%20emit%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>이벤트 on, emit 사용하기</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 이벤트 on, emit 사용하기</span><span class="hljs-comment">// emit으로 보내고 on으로 받음</span>process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;tick&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">count</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;tick 이벤트 발생함: &#x27;</span> + count)&#125;)<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2초 후에 실행되었음&#x27;</span>)    process.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;tick&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)&#125;, <span class="hljs-number">2000</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>초 후에 실행되었음<span class="hljs-attribute">tick</span> 이벤트 발생함: <span class="hljs-number">2</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>22. readFile : 파일을 읽고 불러오기 (비동기방식)</title>
    <link href="/2019/10/28/Before/Javascript/Node/22.%20readFile%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%9D%BD%EA%B3%A0%20%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0%20(%EB%B9%84%EB%8F%99%EA%B8%B0%EB%B0%A9%EC%8B%9D)/"/>
    <url>/2019/10/28/Before/Javascript/Node/22.%20readFile%20%ED%8C%8C%EC%9D%BC%EC%9D%84%20%EC%9D%BD%EA%B3%A0%20%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0%20(%EB%B9%84%EB%8F%99%EA%B8%B0%EB%B0%A9%EC%8B%9D)/</url>
    
    <content type="html"><![CDATA[<p>readFile : 파일을 읽고 불러오기 (비동기방식)</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// readFile : 파일을 읽고 불러오기 (비동기방식)</span><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./package.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)&#125;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs stata">&#123;  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;node&quot;</span>,  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;main.js&quot;</span>,  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;</span><span class="hljs-keyword">Error</span>: <span class="hljs-keyword">no</span> <span class="hljs-keyword">test</span> specified\<span class="hljs-string">&quot; &amp;&amp; exit 1&quot;</span>     &#125;,  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
      <category>Node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01. 형변환 하기</title>
    <link href="/2019/10/27/Before/Javascript/01%20%ED%98%95%EB%B3%80%ED%99%98%20%ED%95%98%EA%B8%B0/"/>
    <url>/2019/10/27/Before/Javascript/01%20%ED%98%95%EB%B3%80%ED%99%98%20%ED%95%98%EA%B8%B0/</url>
    
    <content type="html"><![CDATA[<p>형변환 하기</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;234&#x27;</span>))</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>04. 삼항연산자</title>
    <link href="/2019/10/27/Before/Javascript/04%20%EC%82%BC%ED%95%AD%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    <url>/2019/10/27/Before/Javascript/04%20%EC%82%BC%ED%95%AD%EC%97%B0%EC%82%B0%EC%9E%90/</url>
    
    <content type="html"><![CDATA[<p>삼항연산자</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;숫자를 입력해주세요&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)</span><span class="language-javascript">        <span class="hljs-keyword">var</span> number = <span class="hljs-title class_">Number</span>(input)</span><span class="language-javascript"></span><span class="language-javascript">        (number &gt; <span class="hljs-number">0</span>) ? <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;자연수입니다&#x27;</span>) : <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;자연수가 아닙니다.&#x27;</span>)</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>02. prompt confirm</title>
    <link href="/2019/10/27/Before/Javascript/02%20prompt%20confirm/"/>
    <url>/2019/10/27/Before/Javascript/02%20prompt%20confirm/</url>
    
    <content type="html"><![CDATA[<p>prompt : 입력값을 받을수 있습니다<br>confirm: 확인 취소 버튼을 표시합니다</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">var</span> output = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;메시지&#x27;</span>, <span class="hljs-string">&#x27;디폴트&#x27;</span>)</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(output)</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">var</span> output2 = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;메시지&#x27;</span>)</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(output2)</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>03. 배열</title>
    <link href="/2019/10/27/Before/Javascript/03%20%EB%B0%B0%EC%97%B4/"/>
    <url>/2019/10/27/Before/Javascript/03%20%EB%B0%B0%EC%97%B4/</url>
    
    <content type="html"><![CDATA[<p>배열</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">var</span> array = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>];</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array);</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array[<span class="hljs-number">0</span>]);</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array[<span class="hljs-number">1</span>]);</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array[<span class="hljs-number">2</span>]);</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array[<span class="hljs-number">3</span>]);</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array[<span class="hljs-number">4</span>]);</span><span class="language-javascript">        array[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;</span><span class="language-javascript">        array[<span class="hljs-number">1</span>] = <span class="hljs-number">200</span>;</span><span class="language-javascript">        <span class="hljs-title function_">alert</span>(array);</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>06. switch 조건문</title>
    <link href="/2019/10/27/Before/Javascript/06%20switch%20%EC%A1%B0%EA%B1%B4%EB%AC%B8/"/>
    <url>/2019/10/27/Before/Javascript/06%20switch%20%EC%A1%B0%EA%B1%B4%EB%AC%B8/</url>
    
    <content type="html"><![CDATA[<p>switch 조건문</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()</span><span class="language-javascript">        <span class="hljs-keyword">var</span> month = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span></span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">switch</span>(month) &#123;</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:</span><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;봄 입니다&#x27;</span>)</span><span class="language-javascript">                <span class="hljs-keyword">break</span></span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:</span><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;여름 입니다&#x27;</span>)</span><span class="language-javascript">                <span class="hljs-keyword">break</span></span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:</span><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;가을 입니다&#x27;</span>)</span><span class="language-javascript">                <span class="hljs-keyword">break</span></span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:</span><span class="language-javascript">            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:</span><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;겨울 입니다&#x27;</span>)</span><span class="language-javascript">                <span class="hljs-keyword">break</span></span><span class="language-javascript">        &#125;</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>05. boolean 표현식</title>
    <link href="/2019/10/27/Before/Javascript/05%20boolean%20%ED%91%9C%ED%98%84%EC%8B%9D/"/>
    <url>/2019/10/27/Before/Javascript/05%20boolean%20%ED%91%9C%ED%98%84%EC%8B%9D/</url>
    
    <content type="html"><![CDATA[<p>boolean 표현식</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-keyword">var</span> number = <span class="hljs-title class_">Number</span>(<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;숫자를 입력해주세요&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>));</span><span class="language-javascript"></span><span class="language-javascript">        (number &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;자연수 입니다&#x27;</span>);</span><span class="language-javascript">        (number &gt; <span class="hljs-number">0</span>) || <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;자연수가 아닙니다&#x27;</span>);</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Before</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
